import os
import logging
import asyncio
import aiohttp
import pyzipper
import secrets
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-bot-name.onrender.com
DEEPSEEK_API_KEY = os.environ.get("DEEPSEEK_API_KEY")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∂–∏–º–æ–≤ (–≤ –ø–∞–º—è—Ç–∏, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É)
user_modes = {}  # user_id: 'zip' –∏–ª–∏ 'ai'

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
def generate_password(length=10):
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
def mode_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("\ud83d\udce6 –ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä", callback_data="mode_zip"),
         InlineKeyboardButton("\ud83e\udde0 –ù–µ–π—Ä–æ—Å–µ—Ç—å", callback_data="mode_ai")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_modes[user_id] = 'zip'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=mode_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "mode_zip":
        user_modes[user_id] = 'zip'
        await query.edit_message_text("–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: üì¶ –ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä")
    elif query.data == "mode_ai":
        user_modes[user_id] = 'ai'
        await query.edit_message_text("–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: \U0001F9E0 –ù–µ–π—Ä–æ—Å–µ—Ç—å")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mode = user_modes.get(user_id, 'zip')

    if mode == 'zip':
        await handle_zip_file(update, context)
    elif mode == 'ai':
        await handle_ai_message(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
async def handle_zip_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    file = message.document or message.audio or message.video

    if not file:
        await message.reply_text("–§–∞–π–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    password = generate_password()
    file_name = file.file_name or "file"
    zip_name = file_name + ".zip"

    await message.reply_text("–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")

    new_file = await file.get_file()
    async with aiohttp.ClientSession() as session:
        async with session.get(new_file.file_path) as resp:
            data = await resp.read()

    with open(file_name, "wb") as f:
        f.write(data)

    with pyzipper.AESZipFile(zip_name, 'w',
                             compression=pyzipper.ZIP_DEFLATED,
                             encryption=pyzipper.WZ_AES) as zf:
        zf.setpassword(password.encode('utf-8'))
        zf.write(file_name, arcname=file_name)

    with open(zip_name, "rb") as f:
        await message.reply_document(
            f,
            filename=zip_name,
            caption=f"\u2705 –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω.\n\ud83d\udd10 –ü–∞—Ä–æ–ª—å: `{password}`",
            parse_mode="Markdown"
        )

    os.remove(file_name)
    os.remove(zip_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
async def handle_ai_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.caption or update.message.text
    if not prompt:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.")
        return

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
    }
    payload = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }

    await update.message.reply_chat_action(action="typing")

    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.deepseek.com/chat/completions", json=payload, headers=headers) as resp:
            if resp.status != 200:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            result = await resp.json()
            reply = result["choices"][0]["message"]["content"]
            await update.message.reply_text(reply)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_mode))
    app.add_handler(MessageHandler(filters.ATTACHMENT | filters.TEXT, handle_file))

    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", "10000")),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())