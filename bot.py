import os
import tempfile
import string
import secrets
import subprocess
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN = os.getenv("TOKEN")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É
started_users = set()

def generate_password(length=8):
    alphabet = string.ascii_letters + string.digits + string.punctuation
    while True:
        password = ''.join(secrets.choice(alphabet) for _ in range(length))
        if (any(c.islower() for c in password) and
            any(c.isupper() for c in password) and
            any(c.isdigit() for c in password)):
            return password

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in started_users:
        started_users.add(user_id)
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª, –∏ —è –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä—É—é –µ–≥–æ —Å –ø–∞—Ä–æ–ª–µ–º.")
    else:
        await update.message.reply_text("–¢—ã —É–∂–µ –Ω–∞—á–∞–ª, –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–∞–π–ª—ã üòä")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in started_users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start.")
        return

    document = update.message.document
    if not document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª.")
        return

    password = generate_password()

    with tempfile.TemporaryDirectory() as tmpdir:
        input_path = os.path.join(tmpdir, document.file_name)
        archive_path = os.path.join(tmpdir, document.file_name + ".zip")

        file = await document.get_file()
        await file.download_to_drive(input_path)

        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 7z
        subprocess.run([
            "7z", "a", "-p" + password, "-y", archive_path, input_path
        ], check=True)

        with open(archive_path, "rb") as f:
            await update.message.reply_document(f, filename=os.path.basename(archive_path))

        await update.message.reply_text(f"–§–∞–π–ª –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–∞—Ä–æ–ª—å: `{password}`", parse_mode="Markdown")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.run_polling()
